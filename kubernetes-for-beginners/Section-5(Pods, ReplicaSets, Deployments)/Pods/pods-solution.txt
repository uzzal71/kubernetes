1. How many pods exists on the system? in the current(default) namespace.
--> kubectl get pods

2. Create a new pod with the nginx image.
--> kubectl run nginx --image=nginx

3. How many pods are created now?
   Note: We have created a few more pods. So please check again
--> kubectl get pods

4. What is the image used to create new pods?
   You must look at one of the new pods in detail to figure this out.
--> kubectl describe pod newpods

5. Which nodes are these pods placed on?
   You must look at all the pods in detail to figure this out.
--> kubectl get pods -o wide

6. How many containers are part of the pod webapp?
   Note: We just created a new POD. Ignore the state of the POD for now.
--> kubectl get pods
--> kubectl describe pod webapp

7. What images are used in the new webapp pod?
   You must look at all the pods in detail to figure this out.
--> kubectl describe pod webapp

8. What is the state of the container agentx in the pod webapp?
   Wait for it to finish the ContainerCreating state
--> kubectl describe pod webapp (state section)

9. Why do you think the container agentx in pod webapp is in error?
   Try to figure it out from the events section of the pod
--> kubectl describe pod webapp (event section)

10. What does the READY column in the output of the kubectl get pods command indicate?
--> kubectl get pods

11. Delete the webapp Pod.
    Once deleted. wait for the pod to fully terminate.
--> kubectl delete pod webapp

12. Create a new pod with the name redis and with the image redis123
    Use s pod-definition YAML file. And yes the image name is wrong!
--> kubectl run redis --image=redis123 --dry-run=client -o yaml
--> kubectl run redis --image=redis123 --dry-run=client -o yaml > redis.yaml
--> cat redis.yaml
--> kubectl create -f redis.yaml
--> kubectl get pods

13. Now chage the image on this pod to redis.
    Once done, the pod should be in a running state.
--> vi redis.yaml (update redis123 to redis)
--> kubectl get pods